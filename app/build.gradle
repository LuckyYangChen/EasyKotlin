/*
 * Copyright WeiLianYang
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id "com.google.protobuf" version "0.8.19"
    id 'dagger.hilt.android.plugin'
}

def androidConfig = rootProject.ext.android

android {
    compileSdkVersion androidConfig.compileSdkVersion
    buildToolsVersion androidConfig.buildToolsVersion

    defaultConfig {

        applicationId androidConfig.applicationId

        minSdk androidConfig.minSdkVersion
        targetSdk androidConfig.targetSdkVersion

        versionCode androidConfig.versionCode
        versionName androidConfig.versionName

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        debug {
            storeFile file('keystore/debug.jks')
            storePassword 'debug123'
            keyAlias 'debug'
            keyPassword 'debug123'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion kotlin_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.william.easykt'

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "ek_v${defaultConfig.versionName}_${defaultConfig.versionCode}_${buildType.name}.apk"
            tasks.named("assemble${variant.name.capitalize()}").configure {
                doLast {
                    copy {
                        from outputFile
                        into "apks"
                    }
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    // Compose Material Design
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // Animations
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1'
    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    implementation 'io.coil-kt:coil-compose:2.2.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Test Multi process
    androidTestImplementation 'androidx.test.espresso:espresso-remote:3.4.0'

    // Test Android Intent
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'

    // Test RecyclerView
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'

    // Test WebView
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'

    // Test Accessibility
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.4.0'

    // UiAutomator Testing
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'


    implementation project(':base_component')

    def camerax_version = "1.2.0-rc01"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"

    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    implementation 'androidx.core:core-splashscreen:1.0.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // Hilt dependencies
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Hilt testing dependency
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    // Make Hilt generate code in the androidTest folder
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.21.5"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
