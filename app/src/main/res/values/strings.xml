<!--
  ~ Copyright WeiLianYang
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<resources>
    <string name="app_name">EasyKotlin</string>

    <string name="test_net_data">测试加载网络数据</string>
    <string name="test_card_effects">测试卡片滑动效果</string>
    <string name="test_wave_effects">测试手指水波纹效果</string>
    <string name="test_card_pager">测试卡片滑动效果2</string>
    <string name="test_scroll">测试无限滑动的RecyclerView</string>
    <string name="test_permission">测试申请权限</string>
    <string name="test_request_permission">申请权限</string>
    <string name="test_open_target_page">打开指定页面</string>
    <string name="test_available_space">查询可用空间</string>
    <string name="test_flurry_analytics">测试Flurry分析</string>
    <string name="test_flurry_crash">Test Flurry Crash</string>
    <string name="test_nested_scrolling">Nested Scrolling</string>
    <string name="test_kotlin_flow">Test Kotlin Flow</string>
    <string name="test_bottom_sheet">Bottom Sheet Dialog</string>
    <string name="test_kotlin_channel">Test Kotlin Channel</string>
    <string name="test_material_snackbar">Snackbar</string>
    <string name="test_success">execute success</string>
    <string name="test_diff_util">RecyclerView DiffUtil</string>
    <string name="test_diff_util_button1">Change Item 1</string>
    <string name="test_diff_util_button2">Remove Item</string>
    <string name="test_kotlin_coroutines">Test Kotlin Coroutines</string>

    <string name="test_kotlin_flow1">1. 异步计算的值流</string>
    <string name="test_kotlin_flow2">2. 冷流</string>
    <string name="test_kotlin_flow3">3. 取消流</string>
    <string name="test_kotlin_flow4">4. 流构建器：.asFlow() / flowOf() </string>
    <string name="test_kotlin_flow5">5. 过渡操作符：flow.map{} / flow.filter{} </string>
    <string name="test_kotlin_flow6">6. 转换操作符：flow.transform{} </string>
    <string name="test_kotlin_flow7">7. 限长操作符：flow.take() </string>
    <string name="test_kotlin_flow8">8. 末端操作符：.reduce / .fold / .first \n .single / .toList / .toSet </string>
    <string name="test_kotlin_flow9">9. 流是连续的</string>
    <string name="test_kotlin_flow10">10. 流的上下文 withContext</string>
    <string name="test_kotlin_flow11">11. flowOn 操作符</string>
    <string name="test_kotlin_flow12">12. 缓冲：flow.buffer()</string>
    <string name="test_kotlin_flow13">13. 合并：flow.conflate()</string>
    <string name="test_kotlin_flow14">14. 处理最新值：flow.collectLatest{}</string>
    <string name="test_kotlin_flow15">15. 组合多个流：flowA.zip(flowB) /\n flowA.combine(flowB)</string>
    <string name="test_kotlin_flow16">16. 展平流：flatMapConcat / \nflatMapMerge / flatMapLatest</string>
    <string name="test_kotlin_flow17">17. 流异常：收集器 try 与 catch</string>
    <string name="test_kotlin_flow18">18. 异常透明性：透明捕获 / 声明式捕获</string>
    <string name="test_kotlin_flow19">19. 流完成：命令式 / 声明式 / 启动流</string>
    <string name="test_kotlin_flow20">20. 流取消检测（会崩溃）</string>

    <string name="test_kotlin_channel1">1. 通道基础</string>
    <string name="test_kotlin_channel2">2. 关闭与迭代通道</string>
    <string name="test_kotlin_channel3">3. 构建通道生产者</string>
    <string name="test_kotlin_channel4">4. 管道</string>
    <string name="test_kotlin_channel5">5. 使用管道的素数</string>
    <string name="test_kotlin_channel6">6. 扇出</string>
    <string name="test_kotlin_channel7">7. 扇入</string>
    <string name="test_kotlin_channel8">8. 带缓冲的通道</string>
    <string name="test_kotlin_channel9">9. 通道是公平的</string>
    <string name="test_kotlin_channel10">10. 计时器通道</string>

    <string-array name="coroutines_string_array">
        <item>1. 基础：非阻塞式挂起</item>
        <item>2. 基础：协程 Job.Join()</item>
        <item>3. 基础：结构化的并发</item>
        <item>4. 基础：作用域构建器</item>
        <item>5. 基础：全局协程像守护线程</item>
    </string-array>

</resources>
